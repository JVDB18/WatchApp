{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.isLoggedIn = new BehaviorSubject(false);\n      this.isLog$ = this.isLoggedIn.asObservable();\n      this.storeToken = new BehaviorSubject(localStorage.getItem('token'));\n      this.storedToken$ = this.storeToken.asObservable();\n      this.getAuthentication = () => {\n        const authUri = `${environment.trakt.authUrl}/oauth/authorize?response_type=code&client_id=${environment.trakt.clientId}&redirect_uri=${environment.trakt.redirectUri}/authorize`;\n        window.location.href = authUri;\n      };\n    }\n    updateIsLog(boolean) {\n      this.isLoggedIn.next(boolean);\n    }\n    getParsed() {\n      let parsedUrl = new URL(window.location.href);\n      let code = parsedUrl.searchParams.get('code');\n      localStorage.setItem('code', code);\n    }\n    getToken() {\n      return this.http.post(`${environment.trakt.tokenUrl}`, {\n        'code': localStorage.getItem('code'),\n        'client_id': environment.trakt.clientId,\n        \"client_secret\": environment.trakt.client_secret,\n        \"redirect_uri\": `${environment.trakt.redirectUri}/authorize`,\n        \"grant_type\": \"authorization_code\"\n      }, {\n        headers: this._getContentHeaders()\n      }).pipe(tap(console.log)).subscribe(res => {\n        this.storeToken.next(localStorage.setItem(\"token\", res.access_token));\n        this.isLoggedIn.next(true);\n      });\n    }\n    permission() {\n      this.isLog$.subscribe(res => this.isAuth = res);\n      return this.isAuth;\n    }\n    getUser() {\n      return this.http.get(`${environment.trakt.baseUrl}/users/settings`, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('token')}`,\n          \"trakt-api-version\": \"2\",\n          \"trakt-api-key\": environment.trakt.clientId\n        })\n      }).pipe(tap());\n    }\n    revokeToken() {\n      return this.http.post(`${environment.trakt.baseUrl}/oauth/revoke`, this._revokeBodyGenerate, {\n        headers: this._getContentHeaders()\n      });\n    }\n    _getContentHeaders() {\n      return new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n    _revokeBodyGenerate() {\n      return {\n        'token': localStorage.getItem('token'),\n        'client_id': environment.trakt.clientId,\n        'client_secret': environment.trakt.client_secret\n      };\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}