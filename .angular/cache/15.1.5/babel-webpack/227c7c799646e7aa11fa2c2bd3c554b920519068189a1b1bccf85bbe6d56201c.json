{"ast":null,"code":"import { Observable, timer, of, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { tap, retryWhen, mergeMap, finalize, catchError, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TmdbService = /*#__PURE__*/(() => {\n  class TmdbService {\n    constructor(http) {\n      this.http = http;\n      this.tmdbUrl = \"https://api.themoviedb.org/3\";\n      this.isLoading = new Subject();\n    }\n    getTaggetImg(id) {\n      return this.http.get(`${this.tmdbUrl}/person/${id}/tagged_images?api_key=${environment.tmdb.key}`);\n    }\n    getSeason(id, number) {\n      return this.http.get(`${this.tmdbUrl}/tv/${id}/season/${number}?api_key=${environment.tmdb.key}`).pipe(tap(), retryWhen(genericRetryStrategy()), catchError(error => of(error)));\n    }\n    getMoviePoster(format, id) {\n      return this.http.get(`${this.tmdbUrl}/${format}/${id}?api_key=${environment.tmdb.key}`).pipe(tap(), retryWhen(genericRetryStrategy()), catchError(error => of(error)));\n    }\n    getTmdbMovieData(format, id) {\n      return this.http.get(`${this.tmdbUrl}/${format}/${id}?api_key=${environment.tmdb.key}`).pipe(tap(), retryWhen(genericRetryStrategy()), catchError(error => of(error)), takeUntil(this.isLoading));\n    }\n    getBackdrop(format, id) {\n      return this.http.get(`${this.tmdbUrl}/${format}/${id}/images?api_key=${environment.tmdb.key}`).pipe(tap(), retryWhen(genericRetryStrategy()), catchError(error => of(error)));\n    }\n    getTrailer(format, id) {\n      return this.http.get(`${this.tmdbUrl}/${format}/${id}/videos?api_key=${environment.tmdb.key}`).pipe(tap(), retryWhen(genericRetryStrategy()));\n      ;\n    }\n    getConfig() {\n      return this.http.get(`https://api.themoviedb.org/3/configuration?api_key=${environment.tmdb.key}`).subscribe(res => this.config = res);\n    }\n  }\n  TmdbService.ɵfac = function TmdbService_Factory(t) {\n    return new (t || TmdbService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  TmdbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TmdbService,\n    factory: TmdbService.ɵfac,\n    providedIn: 'root'\n  });\n  //Créer un observable propre à chaque composant qui sera pris en paramètre par takeUntil !!!!!!!\n  return TmdbService;\n})();\nconst genericRetryStrategy = ({\n  maxRetryAttempts = 4,\n  scalingDuration = 2000,\n  excludedStatusCodes = [404]\n} = {}) => attempts => {\n  return attempts.pipe(mergeMap((error, i) => {\n    const retryAttempt = i + 1;\n    // if maximum number of retries have been met\n    // or response is a status code we don't wish to retry, throw error\n    if (retryAttempt > maxRetryAttempts || excludedStatusCodes.find(e => e === error.status)) {\n      throw error;\n    }\n    console.log(`Attempt ${retryAttempt}: retrying in ${retryAttempt * scalingDuration}ms`);\n    // retry after 1s, 2s, etc...\n    return timer(retryAttempt * scalingDuration);\n  }), finalize(() => console.log('We are done!')));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}